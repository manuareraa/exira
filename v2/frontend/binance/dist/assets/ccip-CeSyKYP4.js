import{b5 as e,b6 as a,b7 as t,b8 as s,b9 as r,ba as n,bb as o,bc as c,bd as d,be as l,bf as u}from"./index-Dn4U-enM.js";class i extends t{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:n,urls:o}){var c;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(null==(c=a.metaMessages)?void 0:c.length)?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>`    ${s(e)}`))],`  Sender: ${n}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class f extends t{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${s(a)}`,`Response: ${r(e)}`],name:"OffchainLookupResponseMalformedError"})}}class b extends t{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const p="0x556f1830",h={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function m(t,{blockNumber:s,blockTag:r,data:l,to:u}){const{args:f}=n({data:l,abi:[h]}),[p,m,w,g,k]=f,{ccipRead:x}=t,O=x&&"function"==typeof(null==x?void 0:x.request)?x.request:y;try{if(!function(t,s){if(!e(t,{strict:!1}))throw new a({address:t});if(!e(s,{strict:!1}))throw new a({address:s});return t.toLowerCase()===s.toLowerCase()}(u,p))throw new b({sender:p,to:u});const n=await O({data:w,sender:p,urls:m}),{data:l}=await o(t,{blockNumber:s,blockTag:r,data:c([g,d([{type:"bytes"},{type:"bytes"}],[n,k])]),to:u});return l}catch(v){throw new i({callbackSelector:g,cause:v,data:l,extraData:k,sender:p,urls:m})}}async function y({data:e,sender:a,urls:t}){var s;let n=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const d=t[c],i=d.includes("{data}")?"GET":"POST",b="POST"===i?{data:e,sender:a}:void 0;try{const t=await fetch(d.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(b),method:i});let o;if(o=(null==(s=t.headers.get("Content-Type"))?void 0:s.startsWith("application/json"))?(await t.json()).data:await t.text(),!t.ok){n=new l({body:b,details:(null==o?void 0:o.error)?r(o.error):t.statusText,headers:t.headers,status:t.status,url:d});continue}if(!u(o)){n=new f({result:o,url:d});continue}return o}catch(o){n=new l({body:b,details:o.message,url:d})}}throw n}export{y as ccipRequest,m as offchainLookup,h as offchainLookupAbiItem,p as offchainLookupSignature};
